---
import fs from 'node:fs';
import path from 'node:path';
import Layout from '../../layouts/Layout.astro';
import {
	SquirrelsongSpecPage,
	type ColorRow,
} from '../../templates/SquirrelsongSpecPage';
import { getContrastingTextColor } from '../../util/getContrastingTextColor';
import { hexToRgb } from '../../util/hexToRgb';

// Either take Squirrelsong repository path from the environment, or default to
// the local folder, created by sync-squirrelsong.ts script
const PALETTE_DIR = import.meta.env.SQRLSNG_DIR ?? 'squirrelsong-master';

/**
 * Remove comments from JSON.
 */
function removeJsonComments(json: string): string {
	return (
		json
			// Remove /* */ comments
			.replaceAll(/\/\*[\s\S]*?\*\//g, '')
			// Remove // comments
			.replaceAll(/\/\/.*/g, '')
	);
}

// Load palette files
const lightPalette: Record<string, string> = JSON.parse(
	removeJsonComments(
		fs.readFileSync(path.join(PALETTE_DIR, 'light/palette.json')).toString()
	)
);
const lightUiPalette: Record<string, string> = JSON.parse(
	removeJsonComments(
		fs.readFileSync(path.join(PALETTE_DIR, 'light/ui.json')).toString()
	)
);
const darkPalette: Record<string, string> = JSON.parse(
	removeJsonComments(
		fs.readFileSync(path.join(PALETTE_DIR, 'dark/palette.json')).toString()
	)
);
const darkUiPalette: Record<string, string> = JSON.parse(
	removeJsonComments(
		fs.readFileSync(path.join(PALETTE_DIR, 'dark/ui.json')).toString()
	)
);

const hexToRgbString = (hex: string) => `RGB(${hexToRgb(hex).join(', ')})`;

const getDarkName = (lightName: string) => {
	return lightName;
};
const getDarkPurpleName = (darkName: string) => {
	return darkName
		.replace('gray', 'purple')
		.replace(/^brightYellowDimer$/, 'brightYellowDimerPurple')
		.replace(/^brightYellowDim$/, 'brightYellowDimPurple')
		.replace(/^brightYellow$/, 'brightYellowPurple');
};

const colorRows: ColorRow[] = Object.entries(lightPalette).map(
	([lightName, lightHex]) => {
		const darkName = getDarkName(lightName);
		const darkHex = darkPalette[darkName];
		const darkPurpleName = getDarkPurpleName(darkName);
		const darkPurpleHex = darkPalette[darkPurpleName];

		return {
			light: {
				name: lightName,
				hex: lightHex,
				rgb: hexToRgbString(lightHex),
				textColor: getContrastingTextColor(lightHex),
			},
			dark: {
				name: darkName,
				hex: darkHex,
				rgb: hexToRgbString(darkHex),
				textColor: getContrastingTextColor(darkHex),
			},
			darkPurple: {
				name: darkPurpleName,
				hex: darkPurpleHex,
				rgb: hexToRgbString(darkPurpleHex),
				textColor: getContrastingTextColor(darkPurpleHex),
			},
		};
	}
);

const uiColors = {
	light: Object.fromEntries(
		Object.entries(lightUiPalette).map(([key, colorName]) => [
			key,
			lightPalette[colorName],
		])
	),
	dark: Object.fromEntries(
		Object.entries(darkUiPalette).map(([key, colorName]) => [
			key,
			darkPalette[getDarkName(colorName)],
		])
	),
	darkPurple: Object.fromEntries(
		Object.entries(darkUiPalette).map(([key, colorName]) => [
			key,
			darkPalette[getDarkPurpleName(colorName)],
		])
	),
};
---

<Layout
	url="/squirrelsong/spec/"
	title="Squirrelsong color theme specification"
	description="Complete color specification for Squirrelsong light and dark themes"
	component={SquirrelsongSpecPage}
	props={{ colorRows, uiColors }}
/>
