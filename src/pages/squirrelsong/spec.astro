---
import fs from 'node:fs';
import path from 'node:path';
import Layout from '../../layouts/Layout.astro';
import {
	SquirrelsongSpecPage,
	type ColorRow,
	type Palette,
	type CombinedPalette,
} from '../../templates/SquirrelsongSpecPage';
import { getContrastingTextColor } from '../../util/getContrastingTextColor';
import { hexToRgb } from '../../util/hexToRgb';

// Either take Squirrelsong repository path from the environment, or default to
// the local folder, created by sync-squirrelsong.ts script
const PALETTE_DIR = import.meta.env.SQRLSNG_DIR ?? 'squirrelsong-master';

function readPalette(filename: string): Palette {
	return JSON.parse(
		removeJsonComments(
			fs.readFileSync(path.join(PALETTE_DIR, filename)).toString()
		)
	);
}

/**
 * Remove comments from JSON.
 */
function removeJsonComments(json: string): string {
	return (
		json
			// Remove /* */ comments
			.replaceAll(/\/\*[\s\S]*?\*\//g, '')
			// Remove // comments
			.replaceAll(/\/\/.*/g, '')
	);
}

function hexToRgbString(hex: string) {
	return `RGB(${hexToRgb(hex).join(', ')})`;
}

function getDarkName(lightName: string) {
	return lightName;
}

function getDarkPurpleName(darkName: string) {
	return darkName
		.replace('gray', 'purple')
		.replace(/^brightYellowDimer$/, 'brightYellowDimerPurple')
		.replace(/^brightYellowDim$/, 'brightYellowDimPurple')
		.replace(/^brightYellow$/, 'brightYellowPurple');
}

function preparePalette(light: Palette, dark: Palette): CombinedPalette {
	return {
		light: Object.fromEntries(
			Object.entries(light).map(([key, colorName]) => [
				key,
				lightPalette[colorName],
			])
		),
		dark: Object.fromEntries(
			Object.entries(dark).map(([key, colorName]) => [
				key,
				darkPalette[getDarkName(colorName)],
			])
		),
		darkPurple: Object.fromEntries(
			Object.entries(dark).map(([key, colorName]) => [
				key,
				darkPalette[getDarkPurpleName(colorName)],
			])
		),
	};
}

// Load palette files
const lightPalette = readPalette('light/palette.json');
const lightUiPalette = readPalette('light/ui.json');
const lightAnsiPalette = readPalette('light/ansi.json');
const darkPalette = readPalette('dark/palette.json');
const darkUiPalette = readPalette('dark/ui.json');
const darkAnsiPalette = readPalette('dark/ansi.json');

const colorRows: ColorRow[] = Object.entries(lightPalette).map(
	([lightName, lightHex]) => {
		const darkName = getDarkName(lightName);
		const darkHex = darkPalette[darkName];
		const darkPurpleName = getDarkPurpleName(darkName);
		const darkPurpleHex = darkPalette[darkPurpleName];

		return {
			light: {
				name: lightName,
				hex: lightHex,
				rgb: hexToRgbString(lightHex),
				textColor: getContrastingTextColor(lightHex),
			},
			dark: {
				name: darkName,
				hex: darkHex,
				rgb: hexToRgbString(darkHex),
				textColor: getContrastingTextColor(darkHex),
			},
			darkPurple: {
				name: darkPurpleName,
				hex: darkPurpleHex,
				rgb: hexToRgbString(darkPurpleHex),
				textColor: getContrastingTextColor(darkPurpleHex),
			},
		};
	}
);

const uiColors = preparePalette(lightUiPalette, darkUiPalette);
const ansiColors = preparePalette(lightAnsiPalette, darkAnsiPalette);
---

<Layout
	url="/squirrelsong/spec/"
	title="Squirrelsong color theme specification"
	description="Complete color specification for Squirrelsong light and dark themes"
	component={SquirrelsongSpecPage}
	props={{ colorRows, uiColors, ansiColors }}
/>
